name: Build & Release Cross-Platform

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # --- 1. Semantic Release (create tag & release) ---
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - run: npm ci

      - name: Run Semantic Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release > semantic-output.txt 2>&1 || true
          echo "Semantic-release output:"
          cat semantic-output.txt
          # Extract upload_url and version from output if exists
          UPLOAD_URL=$(grep -oP 'https://uploads.github.com/releases/\d+/assets' semantic-output.txt | head -n1 || true)
          VERSION=$(jq -r .version package.json)
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # --- 2. Build Linux ---
  linux:
    needs: release
    runs-on: ubuntu-22.04
    if: needs.release.outputs.upload_url != ''
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Xvfb
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Cache FFmpeg
        id: cache-ffmpeg-linux
        uses: actions/cache@v3
        with:
          path: binaries/linux/ffmpeg
          key: ffmpeg-linux-v7.0.2

      - name: Download FFmpeg if needed
        if: steps.cache-ffmpeg-linux.outputs.cache-hit != 'true'
        run: |
          mkdir -p binaries/linux
          curl -L https://github.com/tamnguyenvan/screenarc-assets/releases/download/v0.0.1/ffmpeg -o binaries/linux/ffmpeg
        shell: bash

      - run: chmod +x binaries/linux/ffmpeg

      - run: npm ci

      - name: Build Linux App
        run: npm run dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Asset
        if: needs.release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/ScreenArc-${{ needs.release.outputs.version }}-linux-x64.AppImage
          asset_name: ScreenArc-${{ needs.release.outputs.version }}-linux-x64.AppImage
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --- 3. Build Windows ---
  windows:
    needs: release
    runs-on: windows-latest
    if: needs.release.outputs.upload_url != ''
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: actions/cache@v3
        with:
          path: ~\AppData\Roaming\npm-cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache FFmpeg
        id: cache-ffmpeg-win
        uses: actions/cache@v3
        with:
          path: binaries/windows/ffmpeg.exe
          key: ffmpeg-windows-v7.1.1

      - name: Download FFmpeg if needed
        if: steps.cache-ffmpeg-win.outputs.cache-hit != 'true'
        run: |
          mkdir -p binaries/windows
          curl -L https://github.com/tamnguyenvan/screenarc-assets/releases/download/v0.0.1/ffmpeg.exe -o binaries/windows/ffmpeg.exe
        shell: bash

      - run: |
          npm install -g node-gyp
          npm ci

      - name: Build Windows App
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Asset
        if: needs.release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/ScreenArc Setup ${{ needs.release.outputs.version }}.exe
          asset_name: ScreenArc-Setup-${{ needs.release.outputs.version }}.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --- 4. Build macOS ---
  macos:
    needs: release
    runs-on: macos-latest
    if: needs.release.outputs.upload_url != ''
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Download FFmpeg
        run: |
          mkdir -p binaries/darwin
          curl -L https://github.com/tamnguyenvan/screenarc-assets/releases/download/v0.0.1/ffmpeg-darwin-arm64 -o binaries/darwin/ffmpeg-arm64
          curl -L https://github.com/tamnguyenvan/screenarc-assets/releases/download/v0.0.1/ffmpeg-darwin-x64 -o binaries/darwin/ffmpeg-x64
          chmod +x binaries/darwin/ffmpeg-*

      - run: npm ci

      - name: Build macOS App
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Asset
        if: needs.release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/ScreenArc-${{ needs.release.outputs.version }}.dmg
          asset_name: ScreenArc-${{ needs.release.outputs.version }}-macOS-Universal.dmg
          asset_content_type: application/x-apple-diskimage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
